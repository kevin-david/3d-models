name: Convert STEP to STL

on:
  push:
    paths:
      - '**/*.step'
      - '**/*.stp'
  pull_request:
    paths:
      - '**/*.step'
      - '**/*.stp'
  workflow_dispatch:
    inputs:
      step_files:
        description: 'Comma-separated list of STEP files to convert (optional)'
        required: false
        type: string
        default: ''

env:
  # Mesh quality settings for STL conversion
  LINEAR_DEFLECTION: 0.002      # Surface accuracy in mm (lower = higher quality)
  ANGULAR_DEFLECTION: 0.174533  # Angle in radians (10 degrees, lower = smoother curves)
  
  # FreeCAD installation
  FREECAD_VERSION: 1.0.2        # Latest stable version
  
  # Git commit settings
  COMMIT_MESSAGE: "Auto-generate STL files from STEP files [skip ci]"
  BOT_NAME: "github-actions[bot]"
  BOT_EMAIL: "github-actions[bot]@users.noreply.github.com"

jobs:
  convert:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Get STEP files to process
        id: step-files
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ] && [ -n "${{ github.event.inputs.step_files }}" ]; then
            # Manual dispatch with specific files
            echo "${{ github.event.inputs.step_files }}" | tr ',' '\n' > step_files.txt
            echo "Manual files specified:"
            cat step_files.txt
            echo "has_files=true" >> $GITHUB_OUTPUT
          else
            # Automatic detection via git diff
            echo "Detecting changed STEP files..."
            if [ "${{ github.event_name }}" == "pull_request" ]; then
              git diff --name-only --diff-filter=AM ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep -E '\.(step|stp)$' > step_files.txt || true
            else
              git diff --name-only --diff-filter=AM ${{ github.event.before }} ${{ github.sha }} | grep -E '\.(step|stp)$' > step_files.txt || true
            fi
            
            if [ ! -s step_files.txt ]; then
              echo "No STEP files found"
              echo "has_files=false" >> $GITHUB_OUTPUT
            else
              echo "Changed STEP files:"
              cat step_files.txt
              echo "has_files=true" >> $GITHUB_OUTPUT
            fi
          fi
      
      - name: Install OpenCASCADE via conda
        if: steps.step-files.outputs.has_files == 'true'
        run: |
          # Install miniconda
          wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh
          bash miniconda.sh -b -p $HOME/miniconda
          export PATH="$HOME/miniconda/bin:$PATH"
          
          # Create environment with specific Python version
          conda create -n freecad python=3.10 -y
          source activate freecad
          
          # Install OpenCASCADE and pythonocc via conda-forge
          conda install -c conda-forge pythonocc-core -y
          
          # Add to PATH for this session
          echo "$HOME/miniconda/bin" >> $GITHUB_PATH
          echo "source activate freecad" >> $HOME/.bashrc
          
          # Verify installation
          python -c "from OCC.Core import STEPControl_Reader; print('OpenCASCADE installed successfully')"
      
      - name: Convert STEP to STL
        if: steps.step-files.outputs.has_files == 'true'
        env:
          LINEAR_DEFLECTION: ${{ env.LINEAR_DEFLECTION }}
          ANGULAR_DEFLECTION: ${{ env.ANGULAR_DEFLECTION }}
        run: |
          # Activate conda environment
          source $HOME/miniconda/bin/activate freecad
          
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "Processing: $file"
              python .github/workflows/convert_step_to_stl.py "$file"
            else
              echo "Warning: File $file not found, skipping"
            fi
          done < step_files.txt
      
      - name: Commit and push STL files
        if: steps.step-files.outputs.has_files == 'true' && github.event_name == 'push'
        run: |
          git config user.name "${{ env.BOT_NAME }}"
          git config user.email "${{ env.BOT_EMAIL }}"
          git add **/*.stl
          git diff --staged --quiet || git commit -m "${{ env.COMMIT_MESSAGE }}"
          git push

